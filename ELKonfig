#!/bin/bash

HOSTNAME=`hostname`
WORKING_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
LOG_FILE="${WORKING_DIR}/install.log"
CHECKED_PACKAGES=0
INDENT=0

REPO_LIST=repos.repo
REPO_SERVER=repo.local.lan
REPO_LIST_URL=http://$REPO_SERVER/$REPO_LIST

REQUIRED_PACKAGES="elasticsearch kibana logstash filebeat zeek-core zeekctl zeekpkg"

# Notework ports
ELASTIC_PORT=9200
KIBANA_PORT=5601
ZEEK_PORT=9900

# Configuration file locations
ELASTIC_CONFIG=/etc/elasticsearch/elasticsearch.yml
KIBANA_CONFIG=/etc/kibana/kibana.yml
ZEEK_CONFIG=/etc/zeek/zeek.con".*?"f
LOGSTASH_CONFIG=/etc/logstash/logstash.yml
FILEBEAT_CONFIG=/etc/filebeat/filebeat.yml

cd $WORKING_DIR
source $WORKING_DIR/multiselect.sh

blue() { echo -e "\033[1;34m$1\033[0m"; }
green() { echo -e "\033[1;32m$1\033[0m"; }
red() {	echo -e "\033[1;31m$1\033[0m"; }
yellow() { echo -e "\033[1;33m$1\033[0m"; }

header() { echo -e "[$( blue ٭ )] ${1}" ;}
info() { echo -e "  [$( blue ? )] ${1}" ;}
success() { echo -e "  [$( green ✔ )] ${1}" ;}
warning() { echo -e "  [$( yellow ! )] ${1}" ;}
error() {
	echo -e "  [$(red ✘)] $1"
	#exit 1
}
# Function for logging
log() {
		timestamp=$(date +%Y-%m-%dT%H:%M:%S)
		case $1 in
			success)
				success "${2}"
				echo -e "[$timestamp] $(success ${2})" >> $LOG_FILE
				;;
			error)
				error "${2}"
				echo -e "[$timestamp] $(error ${2})" >> $LOG_FILE
				;;
			info)
				info "${2}"
				echo -e "[$timestamp] $(info ${2})" >> $LOG_FILE
				;;
			warn)
				warning "${2}"
				echo -e "[$timestamp] $( warning ${2})" >> $LOG_FILE
				;;
			header)
				header "${2}" 
				echo -e "[$timestamp] $(header ${2})" >> $LOG_FILE
				;;
			*)
				info "${2}"
				echo -e "[$timestamp] $(info ${2})" >> $LOG_FILE
				;;
		esac
}

# Function checks for configured repositories and downloads them if not found.
check_repos() {
	log "header" "Checking for repositories"
	if [[ ! -f $REPO_LIST ]]; then
		log "info" "Downloading repositories list..."
		wget $REPO_LIST_URL > /etc/yum.repos.d/$REPO_LIST > /dev/null 2>&1
		if [[ ! -f $REPO_LIST ]]; then
			log "error" "Failed to download repositories list."
		fi
	fi
}

# Function checks is service is-enabled
check_service_enabled() {
	systemctl is-enabled $1 > /dev/null 2>&1
	if [ $? -ne 0 ] && [ $SERVICE_CHECKED -le 1 ]; then
		log "info" "[${SERVICE_CHECKED + 1}] Service is not enabled. Attempting to enable..."
		systemctl enable $1 > /dev/null 2>&1
		((SERVICE_CHECKED++))
		check_service_enabled $1
	elif [[ $SERVICE_CHECK == 2 ]]; then
		log "info" "Failed to enable service..."
		return 1
	
	else
		log "success" "Service is enabled."
		SERVICE_CHECKED=0
		return 0
	fi
}

# Function checks is service is-active
check_service_active() {
	running=$(systemctl status $1 | grep -ic "active (running)")
	if [[ $running -ne 1 ]];  then
		log "warn" "Service is not started, lets change that."
		systemctl restart $1 > /dev/null 2>&1
		
		# Check if service is started
		running=systemctl status $1 | grep -ic "active (running)"
		if [[ $running -ne 1 ]]; then
			log "error" "Service will not start. 'systemctl status $a.service' for more information."
			return 1
		fi
	else
		log "success" "Service is started."
		return 0
	fi
}

# Function checks is arg1 is enabled and started.
check_service() {
	check_service_active $1
	if [ $? -eq 0 ]; then
		check_service_enabled $1
		if [ $? -gt 0 ]; then
			exit 1
		fi
	else
		exit 1
	fi
}

# Function checks is service is listening on port arg1.
check_listening_port() {
	port=$(ss -lnt | grep -cE "^LISTEN.*:$1" )
	if [[ $port -gt 0 ]] ; then
		log "error" "Not listening on port $1."
		return 1
	fi
	log "success" "Listening on port $1."
	return 0
	}

# Function checks elasticsearch is configured and running.
check_elasticsearch() {
	log "info" "Checking Elasticsearch API"
	curl http://127.0.0.1:9200 > /dev/null 2> log
	if [ $? -ne 0 ]; then
		log "warn" "API not responding, lets try that again."
		systemctl restart elasticsearch > /dev/null 2>&1
		curl http://127.0.0.1:9200 > /dev/null 2>&1
		if [ $? -ne 0 ]; then
			log "error" "Nope, API unreachable for some reason, check $ELASTIC_CONFIG for errors."
			exit 1
		fi
	fi
}

# Function installs required packages.
install_packages() {
	log "header" "Installing any required packages"
	for package in $REQUIRED_PACKAGES; do
			installed=$(rpm -q $package | wc -l)
			if [ $installed -lt 1 ]; then
				iyum install -y $package | wc -l > /dev/null 2>&1
				if [[ $installed -lt 0 ]]; then
					log "error" "Failed to install $package..."
					log "error" "Error: $ERROR"
					exit 1
				else
					log "success" "Installed $package..."
				fi
			else
				log "success" "${package} is already installed."
			fi

		done
}

# Function configures Elasticsearch.
configure_elastic() {
	log "header" "Configuring Elasticsearch..."
	
	# Make backup of Elasticsearch config file.
	cp "${ELASTIC_CONFIG}" "${ELASTIC_CONFIG}.backup"
	log "info" "Elastic conf backup: ${ELASTIC_CONFIG}.backup"

	sed -i "s/^#network.host: 192.168.0.1/network.host: 0.0.0.0/g" $ELASTIC_CONFIG
	sed -i "s/^xpack.security.enabled: true/xpack.security.enabled: false/g" $ELASTIC_CONFIG
	sed -i -E "s/^\tenabled: true/\tenabled: false/g" $ELASTIC_CONFIG
	sed -i "s/^#http.port: 9200/http.port: $ELASTIC_PORT/g" $ELASTIC_CONFIG
	sed -i "s/#node.name: localhost.localdomain/node.name: $HOSTNAME/g" $ELASTIC_CONFIG
	sed -i "s/^#cluster.name: my-application/cluster.name: $HOSTNAME-cluster/g" $ELASTIC_CONFIG
	sed -i "s/^cluster.initial_master_nodes: [\"localhost.localdomain\"]/cluster.initial_master_nodes: [\"$HOSTNAME\"]/g" $ELASTIC_CONFIG

	# Check service
	log "info" "Checking Elasticsearch service"
	check_service elasticsearch

	# Check listening port
	log "info" "Checking Elasticsearch's listening port"
	check_listening_port "Elasticsearch" $ELASTIC_PORT

	if [[ $? -gt 0 ]]; then
		log "error" "Failed to configure Elasticsearch..."
	fi
	log "success" "Listening on ${ELASTIC_PORT}..."

	check_elasticsearch

	log "success" "Configured Elasticsearch..."
	return 0
}
 
# Function configures Kibana.
configure_kibana() {
	log "header" "Configuring Kibana..."

	# Make backup of kibana config
	cp "${KIBANA_CONFIG}" "${KIBANA_CONFIG}.backup"
	log "info" "Kibana conf backup: ${KIBANA_CONFIG}.backup..."
	
	# Add basic config
	echo -e "server.port: 5601
server.host: "${HOSTNAME}"
server.name: "${HOSTNAME}"
elasticsearch.hosts: [\"http://${HOSTNAME}:9200\"]
logging:
  appenders:
    file:
      type: file
      fileName: /var/log/kibana/kibana.log
      layout:
        type: json
  root:
    appenders:
      - default
      - file
pid.file: /run/kibana/kibana.pid " > ${KIBANA_CONFIG}

	# If kibana user dosent exist we create it
	if [[ ! $(getent passwd kibana) =~ "kibana" ]]; then
		log "info" "Kibana user does not exist, creating..."
		
		# Create kibana user and group
		groupadd kibana
		useradd -r -s /sbin/nologin -g kibana kibana
	fi
	
	# Give Kibana user access to requiored directories
	chown -R kibana:kibana /usr/share/kibana/* > /dev/null 2>&1
	chown -R kibana:kibana /var/lib/kibana > /dev/null 2>&1
	chmod -R 755 /var/www/kibana > /dev/null 2>&1

	# Check service is running
	check_service kibana

	# Check listening port
	check_listening_port "Kibana" $KIBANA_PORT
	[[ $? -eq 0 ]] && log "success" "Configured and listening on ${KIBANA_PORT}..." || log "Kibana" "error" "Configured, but not listening on ${KIBANA_PORT}..."
}

# Function configures Logstash.
configure_logstash() {
	log "header" "Configuring Logstash..."		
	INDENT=0
	log "info" "Configuring Logstash..."
	
	# Make backup of logstash config
	cp "${LOGSTASH_CONFIG}" "${LOGSTASH_CONFIG}.backup"
	log "info" "Logstash conf backup: ${LOGSTASH_CONFIG}.backup..."
	
	sed -i "s/^#host: localhost/host: $HOSTNAME/g" $LOGSTASH_CONFIG
	sed -i "s/^port: 5044/port: $ELASTIC_PORT/g" $LOGSTASH_CONFIG
	log "success" "Configured..."
}

# Function configures Filebeat
configure_filebeat() {
	log "info" "Configuring Filebeat..."
	
	# Make backup of origional filebeat config
	cp "${FILEBEAT_CONFIG}" "${FILEBEAT_CONFIG}.backup"
	log "info" "Filebeat conf backup: ${FILEBEAT_CONFIG}.backup..."
	
	sed -i "s/^#host: localhost/host: $HOSTNAME/g" $FILEBEAT_CONFIG
	sed -i "s/^port: 5044/port: $ELASTIC_PORT/g" $FILEBEAT_CONFIG

	# Log local /var/log/message too
	sed -i "s/^#path.logs: \/var\/log\/messages/path.logs: \/var\/log\/messages/g" $FILEBEAT_CONFIG

	# Enable filebeat modules
	filebeat modules enable system > /dev/null 2>&1
	filebeat modules enable elasticsearch > /dev/null 2>&1

	# Run filebeat setup command
	filebeat setup > /dev/null 2>&1
	if [ $? -ne 0 ]; then
		log "error" "Failed to setup..."
		exit 1
	fi

	# Finally start and check it"s running
	check_service filebeat

	log "success" "Configured..."
}

# Function adds firewall rules.
configure_firewall() {
	log "header" "Configuring Firewall..."
	firewall-cmd --zone=public --add-port="${ELASTIC_PORT}/tcp" --permanent > /dev/null 2>&1 
	firewall-cmd --zone=public --add-port="${KIBANA_PORT}/tcp" --permanent > /dev/null 2>&1
	firewall-cmd --zone=public --add-port="${LOGSTASH_PORT}/tcp" --permanent > /dev/null 2>&1
	firewall-cmd --zone=public --add-port="${FILEBEAT_PORT}/tcp" --permanent > /dev/null 2>&1
	firewall-cmd --reload > /dev/null 2>&1
	if [[ $? -ne 0 ]]; then
		log "error" "Failed to configure firewall..."
		log "error" "Error: $?"
		exit 1
	else
		log "success" "Configured..."
	fi
}

# Function configured Zeek
configure_zeek() {
	INDENT=0
	log "header" "Configuring Zeek..."
	cp /etc/zeek/zeekd.yml /etc/zeek/zeek.yml.backup > /dev/null 2>&1
	sed -i "s/^#host: localhost/host: $HOSTNAME/g" $ZEEK_CONFIG
	sed -i "s/^port: 9999/port: $ZEEK_PORT/g" $ZEEK_CONFIG
	sed -i "s/^#log_dir: \/var\/log\/zeek/log_dir: \/var\/log\/zeek/g" $ZEEK_CONFIG
	sed -i "s/^#pid_file: \/var\/run\/zeek\/zeekd.pid/pid_file: \/var\/run\/zeek\/zeekd.pid/g" $ZEEK_CONFIG
	sed -i "s/^#user: zeek/user: zeek/g" $ZEEK_CONFIG
	sed -i "s/^#group: zeek/group: zeek/g" $ZEEK_CONFIG
	sed -i "s/^#conf_dir: \/etc\/zeek/conf_dir: \/etc\/zeek/g" $ZEEK_CONFIG
	sed -i "s/^#data_dir: \/var\/lib\/zeek/data_dir: \/var\/lib\/zeek/g" $ZEEK_CONFIG
	sed -i "s/^#log_dir: \/var\/log\/zeek/log_dir: \/var\/log\/zeek/g" $ZEEK_CONFIG
	sed -i "s/^#pid_file: \/var\/run\/zeek\/zeekd.pid/pid_file: \/var\/run\/zeek\/zeekd.pid/g" $ZEEK_CONFIG
	sed -i "s/^#user: zeek/user: zeek/g" $ZEEK_CONFIG
	sed -i "s/^#group: zeek/group: zeek/g" $ZEEK_CONFIG
}

get_hostname() {
	
	print_title
	
	name=`green $(hostname)`

	echo -e "\n  Current hostname of this system: ${name}\n"
	read -p "  Keep current hostname [y/N]: " accept 
	if [[ "${accept}" =~ ^[Nn]$ ]]; then
		print_title
		echo ""
		read -p "  Enter new hostname: " hostname 
		hostname -b $hostname
		get_hostname
	fi
	HOSTNAME="${name}"
}

get_interface() {
	# Get interface name from user selection
	print_title
	echo "\n  Select interface for services to listen on:"
	
	# All avalible interface names and IP addresses
	interfaces=$(ip -o -4 addr show | awk '{print $2}' | cut -d/ -f1)

	# Create selection menu from interface names
	for i in ${#interfaces[@]} ; do
		echo -e "  ${i}.  ${interfaces[i]}"
	done

	read -p "  Select interface [1-${#interfaces[@]}]: " interface
	
	clear
	
	echo "${interface}"
}

function print_title {
    clear
    cat <<-END
============================================
_____ _     _  __            __ _       
| ____| |   | |/ /___  _ __  / _(_) __ _ 
|  _| | |   | ' // _ \| '_ \| |_| |/ _  |
| |___| |___| . \ (_) | | | |  _| | (_| |
|_____|_____|_|\_\___/|_| |_|_| |_|\__, |
                                   |___/
                            by LördGoober

A reimagied comfiguration tool for the
(E)lasticsearch, (L)Logstash, (K)ibana Stack

============================================
END
}

# Check if user is root.
if [[ "${EUID}" -ne 0 ]]; then
	log "error" "Please run as root..."
	exit 1
fi

get_hostname

print_title
check_repos
install_packages
configure_elastic
configure_kibana
configure_logstash
configure_filebeat
configure_firewall
configure_zeek
